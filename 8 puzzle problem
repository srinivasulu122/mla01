import heapq

# Define the 8-puzzle goal state
goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

# Find the position of the empty space (0) in a given puzzle state
def find_empty_space(state):
    for i in range(len(state)):
        for j in range(len(state[i])):
            if state[i][j] == 0:
                return i, j
    return None

# Generate new states by moving the empty space up, down, left, or right
def generate_moves(state):
    moves = []
    x, y = find_empty_space(state)
    directions = {
        "up": (x - 1, y),
        "down": (x + 1, y),
        "left": (x, y - 1),
        "right": (x, y + 1)
    }

    for direction, (new_x, new_y) in directions.items():
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            moves.append(new_state)

    return moves

# Define the heuristic function (Manhattan Distance)
def heuristic(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                target_x, target_y = divmod(state[i][j] - 1, 3)
                distance += abs(target_x - i) + abs(target_y - j)
    return distance

# A* algorithm to solve the 8-puzzle problem
def a_star_search(initial_state):
    heap = []
    visited = set()
    heapq.heappush(heap, (0, initial_state, []))  # (priority, current state, path to state)

    while heap:
        priority, current_state, path = heapq.heappop(heap)

        if current_state == goal_state:
            return path + [current_state]

        visited.add(tuple(map(tuple, current_state)))

        for move in generate_moves(current_state):
            if tuple(map(tuple, move)) not in visited:
                new_path = path + [current_state]
                priority = len(new_path) + heuristic(move)
                heapq.heappush(heap, (priority, move, new_path))

    return None

# Function to print the puzzle state
def print_state(state):
    for row in state:
        print(" ".join(str(cell) if cell != 0 else " " for cell in row))
    print()

# Example usage
initial_state = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

solution = a_star_search(initial_state)

if solution:
    print("Solution found in {} moves:".format(len(solution) - 1))
    for step, state in enumerate(solution):
        print("Step {}:".format(step))
        print_state(state)
else:
    print("No solution found.")
