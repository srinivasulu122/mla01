import math

WINNING_COMBINATIONS = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],
    [0, 3, 6], [1, 4, 7], [2, 5, 8],
    [0, 4, 8], [2, 4, 6]
]

def check_winner(board, player):
    for combination in WINNING_COMBINATIONS:
        if all(board[i] == player for i in combination):
            return True
    return False

def evaluate(board):
    if check_winner(board, 'X'):
        return 1
    elif check_winner(board, 'O'):
        return -1
    return 0

def is_full(board):
    return all(cell != '-' for cell in board)

def minimax(board, depth, is_maximizing_player):
    score = evaluate(board)
    if score == 1:
        return score - depth
    if score == -1:
        return score + depth
    if is_full(board):
        return 0
    if is_maximizing_player:
        best = -math.inf
        for i in range(9):
            if board[i] == '-':
                board[i] = 'X'
                best = max(best, minimax(board, depth + 1, False))
                board[i] = '-'
        return best
    else:
        best = math.inf
        for i in range(9):
            if board[i] == '-':
                board[i] = 'O'
                best = min(best, minimax(board, depth + 1, True))
                board[i] = '-'
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = -1
    for i in range(9):
        if board[i] == '-':
            board[i] = 'X'
            move_val = minimax(board, 0, False)
            board[i] = '-'
            if move_val > best_val:
                best_move = i
                best_val = move_val
    return best_move

def print_board(board):
    print("\nBoard:")
    for i in range(0, 9, 3):
        print(board[i], board[i + 1], board[i + 2])

def play_game():
    board = ['-' for _ in range(9)]
    print("Welcome to Tic-Tac-Toe!\n")
    while True:
        print_board(board)
        if is_full(board):
            print("It's a tie!")
            break
        move = find_best_move(board)
        board[move] = 'X'
        print(f"\nPlayer (X) plays at position {move + 1}")
        if check_winner(board, 'X'):
            print_board(board)
            print("Player (X) wins!")
            break
        if is_full(board):
            print("It's a tie!")
            break
        print("Player (O)'s turn")
        move = int(input("Enter a position (1-9): ")) - 1
        if board[move] == '-':
            board[move] = 'O'
        else:
            print("Invalid move! Try again.")
            continue
        if check_winner(board, 'O'):
            print_board(board)
            print("Player (O) wins!")
            break

play_game()
